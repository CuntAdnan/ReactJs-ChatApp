{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","tRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderColor","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.4bb5337f.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  \r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n   \r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  \r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\", \r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement tRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderColor={\"black\"}\r\n        borderWidth=\"0.5px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          QuickChat\r\n        </Text>\r\n      </Box>\r\n\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"0.5px\" borderColor={\"black\"}>\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel >\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  \r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\"}} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\n\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\n\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport \"./styles.css\";\r\n\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; \r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  \r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    \r\n    try {\r\n      const config = {  \r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\n\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  \r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          QuickChat\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  \r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n"],"sourceRoot":""}